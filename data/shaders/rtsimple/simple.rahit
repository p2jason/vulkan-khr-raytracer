#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable

#include "common/common.glsl"

hitAttributeEXT vec2 attribs;

layout(set = 0, binding = 3, scalar) buffer VertexTBuffers { vec2 v[]; } texCoordBuffers[];
layout(set = 0, binding = 4, scalar) buffer IndexBuffers { uvec3 i[]; } indexBuffers[];
layout(set = 0, binding = 5) uniform sampler2D albedoTextures[];
layout(set = 0, binding = 6, scalar) buffer MaterialBuffer { Material materialBuffers[]; };

void main() {
	//Pull vertices
	uvec3 indices = indexBuffers[NONUNIFORM_MESH_IDX].i[gl_PrimitiveID];

	vec2 texCoords0 = texCoordBuffers[NONUNIFORM_MESH_IDX].v[indices.x];
	vec2 texCoords1 = texCoordBuffers[NONUNIFORM_MESH_IDX].v[indices.y];
	vec2 texCoords2 = texCoordBuffers[NONUNIFORM_MESH_IDX].v[indices.z];

	vec2 texCoords = texCoords0 * (1.0 - attribs.x - attribs.y) +
					 texCoords1 * attribs.x +
					 texCoords2 * attribs.y;
	
	//Pull material
	Material material = materialBuffers[gl_InstanceID];

	if (material.albedoIndex != -1) {
		float alpha = texture(albedoTextures[nonuniformEXT(material.albedoIndex)], texCoords).a;
		
		if (alpha < 0.5) {
			ignoreIntersectionEXT;
		}
	}
}